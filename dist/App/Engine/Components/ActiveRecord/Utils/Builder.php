<?php


namespace Jet\App\Engine\Components\ActiveRecord\Utils;

use Jet\App\Engine\Components\ActiveRecord\_FieldType;
use Jet\App\Engine\Components\ActiveRecord\Table;
use Jet\App\Engine\Exceptions\CoreException;
use Jet\PHPJet;

/**
 * Class Builder
 * @package Jet\app\Engine\Components\ActiveRecord\Utils
 */
class Builder
{
    /**
     * @var Table
     */
    private $table;
    /**
     * @var string
     */
    private $tableName;

    /**
     * Builder constructor.
     * @param Table $table
     */
    public function __construct(Table $table)
    {
        $this->table = $table;
        $this->tableName = get_class($table);
    }

    /**
     * @param bool $dropIfExists
     * @return bool
     * @throws CoreException
     */
    public function createTable(bool $dropIfExists = false): bool
    {
        $fields = [];
        $indexes = [];
        $foreignKeys = [];
        $primary = null;
        /**
         * @var _FieldType $fieldType
         */
        $classFields = $this->table->_returnAllFields();
        foreach ($classFields as $fieldName => $fieldType) {
//            $fieldType = $this->table->_getFieldType($fieldName);
            $fieldAttributes = $this->table->_getFieldAttributes($fieldName);
            $fieldIndex = $this->table->_getFieldIndex($fieldName);
            // prepare field types
            $fields[$fieldName] = [
                $fieldType->type, $fieldAttributes->null, $fieldAttributes->autoIncrement
            ];
            // check if the specific field should be a primary key
            if ($fieldIndex->primary) {
                if (!$primary) {
                    $primary = $fieldName;
                } else {
                    // actually it is not true for MySQL, but in PHPJet we use only one field as primary (obviously because i'm too lazy to deal with multiple keys)
                    throw new CoreException("In PHPJet only one field can be a primary key, check configuration for class '$this->tableName'. Maybe in future updates ability to have a composite primary key will be added.");
                }
            }
            // check if the field has index
            if ($fieldIndex->index && !$fieldIndex->primary) {
                // todo i completely forgot to create composite indexes, i'll to it eventually...
                $indexes[$fieldName] = [
                    // index name will be generated by Store class
                    [$fieldName], $fieldIndex->unique, $fieldIndex->type
                ];
            }
            // check if field has foreign key
            if ($fieldIndex->foreignKey) {
                $foreignKeys[$fieldName] = [
                    $fieldIndex->foreignKeyField->table, $fieldIndex->foreignKeyField->field, $fieldIndex->foreignKeyType
                ];
            }
        }

        if (!$primary) {
            throw new CoreException("At least one field should be a primary key, check configuration for class '$this->tableName'");
        }

        // let Store deal with other stuff
        return PHPJet::$app->store->createTable($this->table->_returnDatabaseName(), [
            'fields' => $fields,
            'primary' => $primary,
            'indexes' => $indexes,
            'foreignKeys' => $foreignKeys
        ], $dropIfExists, true, true);
    }

    /**
     * @param _TableStatus $tableStatus
     * @return bool
     */
    public function updateTable(_TableStatus $tableStatus): bool
    {
        // todo
        return false;
    }
}